{
    "prompt1": {
        "dialect": "PostgreSQL",
        "table_info": "CREATE TABLE \\\"12_bones\\\".costs (\n\tdate DATE, \n\tdist_sku TEXT, \n\tmfr_sku TEXT, \n\tmanufacturer TEXT, \n\titem_name TEXT, \n\tpack INTEGER, \n\tsize TEXT, \n\tbrand TEXT, \n\tunit_type TEXT, \n\tquantity INTEGER, \n\tweight NUMERIC(10, 2), \n\tsales NUMERIC(10, 2), \n\tcreated_at TIMESTAMP WITHOUT TIME ZONE, \n\tupdated_at TIMESTAMP WITHOUT TIME ZONE\n)\n\n/*\n3 rows from costs table:\ndate\tdist_sku\tmfr_sku\tmanufacturer\titem_name\tpack\tsize\tbrand\tunit_type\tquantity\tweight\tsales\tcreated_at\tupdated_at\n2019-12-31\t898\tKE0898\tKENS FOODS INC\tMAYO XHVY TFF GF\t4\t1 GA\tKENS\tCS\t3\t95.82\t100.70\t2025-04-01 07:39:16.025863\tNone\n2019-12-31\t16669\tPCD_DEF\tPACKER ITEMS\tPOTATO SWEET JUMBO\t1\t40 LB\tPACKER\tCS\t7\t280.00\t200.72\t2025-04-01 07:39:16.025863\tNone\n2019-12-31\t20882\t100998\tMILKCO INC\tJUG PLAS EMPTY W/LID CLR\t48\t1 GA\tMILKCO\tCS\t24\t288.00\t729.75\t2025-04-01 07:39:16.025863\tNone\n*/\n\n\nCREATE TABLE \\\"12_bones\\\".costs_groups (\n\titem_name TEXT, \n\titem TEXT, \n\titem_type TEXT, \n\titem_group TEXT, \n\tcreated_at TIMESTAMP WITHOUT TIME ZONE, \n\tupdated_at TIMESTAMP WITHOUT TIME ZONE\n)\n\n/*\n3 rows from costs_groups table:\nitem_name\titem\titem_type\titem_group\tcreated_at\tupdated_at\nBASIL FRSH\tFresh Basil\tHerbs\tSeasonings\t2025-04-08 01:54:02.505659\t2025-04-08 01:54:02.505659\nGRITS CORN WHT\tWhite Corn Grits\tGrains\tGrains\t2025-04-08 01:54:02.505659\t2025-04-08 01:54:02.505659\nSUMAC GRND PLAS JAR\tSumac\tSpices\tSeasonings\t2025-04-08 01:54:02.505659\t2025-04-08 01:54:02.505659\n*/\n\n\nCREATE TABLE \\\"12_bones\\\".item_selection_details (\n\tlocation TEXT, \n\torder_id TEXT, \n\torder_num TEXT, \n\tsent_date TIMESTAMP WITHOUT TIME ZONE, \n\torder_date TIMESTAMP WITHOUT TIME ZONE, \n\tcheck_id TEXT, \n\tserver_name TEXT, \n\ttable_name TEXT, \n\tdining_area TEXT, \n\tservice TEXT, \n\tdining_option TEXT, \n\titem_selection_id TEXT, \n\titem_id TEXT, \n\tmaster_id TEXT, \n\tsku TEXT, \n\tplu TEXT, \n\tmenu_item TEXT, \n\tmenu_subgroups TEXT, \n\tmenu_group TEXT, \n\tmenu TEXT, \n\tsales_category TEXT, \n\tgross_price NUMERIC, \n\tdiscount NUMERIC, \n\tnet_price NUMERIC, \n\tqty INTEGER, \n\ttax NUMERIC, \n\tvoid TEXT, \n\tdeferred TEXT, \n\ttax_exempt TEXT, \n\ttax_inclusion_option TEXT, \n\tdining_option_tax TEXT, \n\ttab_name TEXT, \n\tcreated_at TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP, \n\tupdated_at TIMESTAMP WITHOUT TIME ZONE\n)\n\n/*\n3 rows from item_selection_details table:\nlocation\torder_id\torder_num\tsent_date\torder_date\tcheck_id\tserver_name\ttable_name\tdining_area\tservice\tdining_option\titem_selection_id\titem_id\tmaster_id\tsku\tplu\tmenu_item\tmenu_subgroups\tmenu_group\tmenu\tsales_category\tgross_price\tdiscount\tnet_price\tqty\ttax\tvoid\tdeferred\ttax_exempt\ttax_inclusion_option\tdining_option_tax\ttab_name\tcreated_at\tupdated_at\nBrewery\t11.0\tNone\t2019-04-30 00:00:00\t2019-04-30 00:00:00\tNone\tNone\tNone\tNone\tNone\tNone\tBrewery1143585\tNone\tNone\tNone\tNone\tBeer Transfer\tNone\ttransfer\tNone\tBeer\t0.0\tNone\t0.0\t2134\tNone\tNone\tNone\tNone\tNone\tNone\t12 Bones Taproom Transfer\t2025-04-07 10:11:28\t2025-04-07 10:11:28\nBrewery\t8.0\tNone\t2019-04-30 00:00:00\t2019-04-30 00:00:00\tNone\tNone\tNone\tNone\tNone\tNone\tNone\tNone\tNone\tNone\tNone\tBeer:1/6 Mixtape Flashback Blueberry Hefeweizen\tNone\tsixtels\tNone\tBeer\t70.0\tNone\t70.0\t1\tNone\tNone\tNone\tNone\tNone\tNone\t12 Bones South\t2025-04-07 10:11:28\t2025-04-07 10:11:28\nBrewery\t8.0\tNone\t2019-04-30 00:00:00\t2019-04-30 00:00:00\tNone\tNone\tNone\tNone\tNone\tNone\tNone\tNone\tNone\tNone\tNone\tBeer:1/6 Too Late for 'Pologize Pineapple IPA (deleted)\tNone\tsixtels\tNone\tBeer\t80.0\tNone\t80.0\t1\tNone\tNone\tNone\tNone\tNone\tNone\t12 Bones South\t2025-04-07 10:11:28\t2025-04-07 10:11:28\n*/\n\n\nCREATE TABLE \\\"12_bones\\\".menu_mappings (\n\tmenu_item TEXT, \n\tmenu_group TEXT, \n\tbusiness_line TEXT, \n\tcategory TEXT, \n\tounces TEXT, \n\tproduct_name TEXT, \n\tproduct_type TEXT, \n\tpackage_amount TEXT, \n\tcreated_at TIMESTAMP WITHOUT TIME ZONE, \n\tupdated_at TIMESTAMP WITHOUT TIME ZONE\n)\n\n/*\n3 rows from menu_mappings table:\nmenu_item\tmenu_group\tbusiness_line\tcategory\tounces\tproduct_name\tproduct_type\tpackage_amount\tcreated_at\tupdated_at\n1 WING\tSPECIALS\tRestaurant\tAdd Ons\t0\tWings\tAdd Ons\t1\t2025-03-21 11:04:38.831000\t2025-03-21 11:04:38.831000\n1. 3 BONES\tRegular\tRestaurant\tJust a Taste\t3\t03 Bones\t03 oz\t\t2025-03-21 11:04:38.831000\t2025-03-21 11:04:38.831000\n1. 3 BONES (Voided)\tRegular\tRestaurant\tJust a Taste\t3\t03 Bones\t03 oz\t\t2025-03-21 11:04:38.831000\t2025-03-21 11:04:38.831000\n*/\n\n\nCREATE TABLE \\\"12_bones\\\".time_entries (\n\tlocation TEXT NOT NULL, \n\tlocation_code TEXT, \n\tid TEXT, \n\tguid TEXT NOT NULL, \n\temployee_id TEXT NOT NULL, \n\temployee_guid TEXT NOT NULL, \n\temployee_external_id TEXT NOT NULL, \n\temployee TEXT NOT NULL, \n\tjob_id TEXT NOT NULL, \n\tjob_guid TEXT NOT NULL, \n\tjob_code TEXT, \n\tjob_title TEXT NOT NULL, \n\tin_date TIMESTAMP WITHOUT TIME ZONE NOT NULL, \n\tout_date TIMESTAMP WITHOUT TIME ZONE, \n\tauto_clockout BOOLEAN NOT NULL, \n\ttotal_hours NUMERIC NOT NULL, \n\tunpaid_break_time NUMERIC NOT NULL, \n\tpaid_break_time NUMERIC NOT NULL, \n\tpayable_hours NUMERIC NOT NULL, \n\tcash_tips_declared NUMERIC, \n\tnon_cash_tips NUMERIC NOT NULL, \n\ttotal_gratuity NUMERIC NOT NULL, \n\ttotal_tips NUMERIC NOT NULL, \n\ttips_withheld NUMERIC NOT NULL, \n\twage NUMERIC, \n\tregular_hours NUMERIC NOT NULL, \n\tovertime_hours NUMERIC NOT NULL, \n\tregular_pay NUMERIC, \n\tovertime_pay NUMERIC NOT NULL, \n\ttotal_pay NUMERIC, \n\tcreated_at TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP, \n\tupdated_at TIMESTAMP WITHOUT TIME ZONE\n)\n\n/*\n3 rows from time_entries table:\nlocation\tlocation_code\tid\tguid\temployee_id\temployee_guid\temployee_external_id\temployee\tjob_id\tjob_guid\tjob_code\tjob_title\tin_date\tout_date\tauto_clockout\ttotal_hours\tunpaid_break_time\tpaid_break_time\tpayable_hours\tcash_tips_declared\tnon_cash_tips\ttotal_gratuity\ttotal_tips\ttips_withheld\twage\tregular_hours\tovertime_hours\tregular_pay\tovertime_pay\ttotal_pay\tcreated_at\tupdated_at\n12 Bones River\tNone\t300000030284522870\t4fe99ffc-6f95-4905-b443-00e34c90e13f\t300000019876656167\t675ce513-f039-4c9b-9842-ae3935b1bf6a\t6446.0\tBall IV, Ewart\t3.0000002146669146e+17\t4f11a64f-5b09-4a32-85cd-5e82c3487118\tNone\tBOH\t2024-01-01 04:24:00\t2024-01-01 12:29:00\tFalse\t8.08\t0.0\t0.0\t8.08\tNone\t0.0\t0.0\t0.0\t0.0\t13.5\t8.08\t0.0\t109.08\t0.0\t109.08\t2025-04-07 11:45:47\t2025-04-07 11:45:47\n12 Bones River\tNone\t300000030284833526\t3fbbfd3f-dbd7-424d-b029-6ff3321acdcb\t300000021276353086\t37b96d6c-1843-492c-8631-ca3a37b214f1\t8038.0\tSegura, Leunam\t3.0000001818720416e+17\t4eff4cbf-c93f-48aa-b538-9d4d3981d49e\tNone\tEXPO\t2024-01-01 08:39:00\t2024-01-01 17:31:00\tFalse\t8.87\t0.0\t0.0\t8.87\tNone\t0.0\t0.0\t0.0\t0.0\t12.0\t8.87\t0.0\t106.44\t0.0\t106.44\t2025-04-07 11:45:47\t2025-04-07 11:45:47\n12 Bones River\tNone\t300000030284841564\t584e9942-f1cf-4e35-97bd-293baf51cf9a\t300000025250765473\t4e01c41d-b50c-48c2-bded-25abe618901f\t5360.0\tRamos Nigromante, Eduardo\t3.0000002146669146e+17\t4f11a64f-5b09-4a32-85cd-5e82c3487118\tNone\tBOH\t2024-01-01 08:41:00\t2024-01-01 17:33:00\tFalse\t8.87\t0.0\t0.0\t8.87\tNone\t0.0\t0.0\t0.0\t0.0\t10.0\t8.87\t0.0\t88.7\t0.0\t88.7\t2025-04-07 11:45:47\t2025-04-07 11:45:47\n*/",
        "few_shot_examples": "user query: are we getting better or worse?\ngenerated sql:\n\"SELECT\n  DATE_TRUNC('month', order_date) AS month,\n  SUM(net_price) AS total_sales,\n  CASE \n    WHEN DATE_TRUNC('month', order_date) = DATE_TRUNC('month', CURRENT_DATE) THEN 'Current Month'\n    WHEN DATE_TRUNC('month', order_date) = DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month') THEN 'Last Month'\n    WHEN DATE_TRUNC('month', order_date) = DATE_TRUNC('month', CURRENT_DATE - INTERVAL '2 months') THEN '2 Months Ago'\n    WHEN DATE_TRUNC('month', order_date) = DATE_TRUNC('month', CURRENT_DATE - INTERVAL '3 months') THEN '3 Months Ago'\n    WHEN DATE_TRUNC('month', order_date) = DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 year') THEN 'Last Year Same Month'\n  END AS period_label\nFROM item_selection_details\nWHERE order_date >= DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 year')\n    AND order_date <= CURRENT_DATE\n    \nGROUP BY DATE_TRUNC('month', order_date)\nHAVING DATE_TRUNC('month', order_date) IN (\n    DATE_TRUNC('month', CURRENT_DATE),                    -- Current month\n    DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month'), -- Last month\n    DATE_TRUNC('month', CURRENT_DATE - INTERVAL '2 months'),-- 2 months ago\n    DATE_TRUNC('month', CURRENT_DATE - INTERVAL '3 months'),-- 3 months ago\n    DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 year')   -- Last year same month\n)\nORDER BY month DESC;\"\n\nExample 2:\n\nuser query: what product category sells more than others?\n\ngenerated sql:\n\"WITH monthly_special_sales AS (\n  SELECT \n    mm.product_name,\n    DATE_TRUNC('month', isd.order_date) AS sales_month,\n    SUM(isd.qty) AS total_quantity,\n    SUM(isd.net_price) AS total_sales\n  FROM \n    item_selection_details isd\n  JOIN \n    menu_mappings mm\n    ON isd.menu_item = mm.menu_item\n    AND COALESCE(isd.menu_group, 'Null') = COALESCE(mm.menu_group, 'Null')\n  WHERE \n    mm.category in ('Special - Bowl', 'Special - Sandwich', 'Special - Plate')\n  GROUP BY \n    mm.product_name,\n    DATE_TRUNC('month', isd.order_date)\n  HAVING \n    SUM(isd.net_price) > 0\n),\nranked_sales AS (\n  SELECT \n    sales_month,\n    product_name,\n    total_quantity,\n    total_sales,\n    RANK() OVER (PARTITION BY sales_month ORDER BY total_sales DESC) AS sales_rank\n  FROM \n    monthly_special_sales\n)\nSELECT\n  sales_month,\n  product_name,\n  total_quantity,\n  total_sales,\n  sales_rank\nFROM\n  ranked_sales\nWHERE\n  sales_rank <= 10\nORDER BY \n  sales_month ASC,\n  total_sales DESC;\"",
        "additional_instruction": "Pay special attention to date formats and use PostgreSQL-specific functions for date manipulations."
    }
}